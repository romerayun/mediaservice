import Toastify from "toastify-js";

function addRow() {
    let table = document.getElementById('editableTable').getElementsByTagName('tbody')[0];
    let newRow = table.insertRow();

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã)
    let headers = document.getElementById('editableTable').getElementsByTagName('thead')[0].rows[1].cells.length;

    // –°–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    for (let i = 0; i < headers - 1; i++) { // –ú–∏–Ω—É—Å 1, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî Actions
        let newCell = newRow.insertCell(i);
        newCell.classList.add('editable-cell');
        // newCell.contentEditable = 'true';
        newCell.innerHTML = '<div class="content">–°–≤–æ–±–æ–¥–Ω–æ</div><div class="user-info"></div>';


    }

    // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è Actions —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    let newCell = newRow.insertCell(headers - 1);
    newCell.innerHTML = '<button class="btn btn-danger btn-sm delete-row">&#10006;</button>';
}


// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
function deleteRow(button) {
    let row = button.parentNode.parentNode;
    row.parentNode.removeChild(row);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
function addColumn() {
    let table = document.getElementById('editableTable');
    let thead = table.getElementsByTagName('thead')[0];
    let tbody = table.getElementsByTagName('tbody')[0];

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    let headerRow = thead.rows[1]; // –¢–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    let removeRow = document.getElementById('removeRow');
    let actionsHeader = headerRow.cells[headerRow.cells.length - 1]; // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É "Actions"
    let removeActionsCell = removeRow.cells[removeRow.cells.length - 1]; // –î–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ "Actions"
    let newTh = document.createElement('th');
    // newTh.contentEditable = 'true';
    newTh.classList.add('editable-cell');
    newTh.innerHTML = '<div class="content">–°–≤–æ–±–æ–¥–Ω–æ</div><div class="user-info"></div>';
    headerRow.insertBefore(newTh, actionsHeader); // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ "Actions"

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ Actions
    let newRemoveTh = document.createElement('th');
    newRemoveTh.innerHTML = '<span class="btn btn-danger btn-sm remove-column-btn" attr-number="' + (headerRow.cells.length - 2) + '">&#10006;</span>';
    removeRow.insertBefore(newRemoveTh, removeActionsCell);

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–æ–π (Actions)
    for (let i = 0; i < tbody.rows.length; i++) {
        let row = tbody.rows[i];
        let actionsCell = row.cells[row.cells.length - 1]; // –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É "Actions"
        let newCell = document.createElement('td');
        // newCell.contentEditable = 'true';
        newCell.classList.add('editable-cell');
        newCell.innerHTML = '<div class="content">–°–≤–æ–±–æ–¥–Ω–æ</div><div class="user-info"></div>';
        row.insertBefore(newCell, actionsCell); // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É –ø–µ—Ä–µ–¥ "Actions"
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
function removeColumn(index) {
    let table = document.getElementById('editableTable');
    let thead = table.getElementsByTagName('thead')[0];
    let tbody = table.getElementsByTagName('tbody')[0];

    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    thead.rows[0].deleteCell(index);
    thead.rows[1].deleteCell(index);

    // –£–¥–∞–ª—è–µ–º —è—á–µ–π–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
    for (let i = 0; i < tbody.rows.length; i++) {
        tbody.rows[i].deleteCell(index);
    }
}

function saveTable() {
    let table = document.getElementById('editableTable');
    let headerRow = table.getElementsByTagName('thead')[0].rows[1]; // –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ thead)
    let rows = table.getElementsByTagName('tbody')[0].rows;

    let headerData = [];
    let rowData = [];

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (let i = 0; i < headerRow.cells.length - 1; i++) { // -1 –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ "Actions"
        let columnName = headerRow.cells[i].getElementsByClassName('content')[0].innerHTML.trim();
        let userId = headerRow.cells[i].getAttribute('user_id');

        headerData[i] = columnName;
        // headerData[i] = {
        //     'column' : columnName,
        //     'user_id' : userId,
        // }; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ –º–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫
    for (let i = 0; i < rows.length; i++) {
        let cells = rows[i].cells;
        let row = {};

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞–∫ –∫–ª—é—á–µ–π
        for (let j = 0; j < cells.length - 1; j++) { // -1 –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ "Actions"
            let cellValue = cells[j].getElementsByClassName('content')[0].innerHTML.trim();
            let columnName = headerData[j];

            let userId = cells[j].getAttribute('user_id');

            row[columnName] = {
                value: cellValue,
                user_id: userId || null
            };
        }

        rowData.push(row); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    }

    console.log(headerData);
    console.log(rowData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ AJAX
    let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    fetch('/events/save-table', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': csrfToken
        },
        body: JSON.stringify({
            headers: headerData, // –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            rows: rowData // –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫
        })
    })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'success') {
                Toastify({
                    text: "<h6>–û—Ç–ª–∏—á–Ω–æ üòç</h6><p>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</p>",
                    className: "customToast",
                    duration: 5000,
                    close: true,
                    escapeMarkup: false,
                }).showToast();
                // console.log(result.message)
                // alert('Table data saved successfully!');
            } else {
                Toastify({
                    text: "<h6>–û–π üò¨</h6><p>–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</p>",
                    className: "customToast",
                    duration: 5000,
                    close: true,
                    escapeMarkup: false,
                }).showToast();
                // alert('Error saving table data.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
}




$("#addRowTable").click(function () {
   addRow();
});

$("#addColumnTable").click(function () {
    addColumn();
});

$(document).on('click', '.delete-row', function () {
    deleteRow(this);
});

$(document).on('click', '.remove-column-btn', function () {
    removeColumn($(this).attr('attr-number'));
});

$("#saveTable").click(function () {
    saveTable();
});

let quill;
let currentCell;

$(document).ready(function () {

    if (document.getElementById('editableTable')) {
        quill = new Quill('#quillEditorContainer', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline'],
                    [{'color': []}, {'background': []}],
                    [{'font': []}],
                    [{'align': []}],
                    ['link', 'video', 'formula'],
                    [{'list': 'ordered'}, {'list': 'bullet'}],
                ]
            },


        });
    }

    $(document).on('click', '.editable-cell',  function () {
        currentCell = $(this);
        const cellContent = currentCell.find('.content').html();

        quill.root.innerHTML = cellContent;
        $("#user").val('0').change();
        if (currentCell.attr('user_id')) {
            $("#user").val(currentCell.attr('user_id')).change();
        }

        if (currentCell.prop('tagName') === 'TH') {
            $("#user").parents('.form-group').css('display', 'none');
        } else {
            $("#user").parents('.form-group').css('display', 'block');
        }

        $('.modal-overlay').show();
        $('#quillModal').show();
    });

    $('#saveButton').on('click', function () {
        const newContent = quill.root.innerHTML;

        let user_id = $("#user").val();

        currentCell.attr('user_id', user_id);

        if (user_id != 0) {
            let user = '<p><b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ' + $("#user :selected").text() + '</p>';
            user = user.replace(/ *\([^)]*\) */g, "");
            currentCell.find('.user-info').html(user);
        } else {
            currentCell.find('.user-info').html('');
        }

        currentCell.find('.content').html(newContent);
        // saveContentToServer(currentCell.data('row'), currentCell.data('column'), newContent);

        closeModal();
    });

    $('#cancelButton').on('click', function () {
        closeModal();
    });

    function closeModal() {
        $('.modal-overlay').hide();
        $('#quillModal').hide();
    }

});
